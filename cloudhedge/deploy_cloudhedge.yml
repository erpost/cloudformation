AWSTemplateFormatVersion: 2010-09-09
Description: Deploy Cloud Hedge Development Environment

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Network Configuration"
        Parameters:
          - AZs
          - VPCCidr
          - Sub1Cidr
          - Sub2Cidr
          - FlowLogRetentionPeriod
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - CloudHedgeAMIID
          - CloudHedgeInstanceType
          - BuildAMIID
          - BuildInstanceType
          - ApplicationAMIID
          - ApplicationInstanceType
          - KeyName
          - SSHLocation
          - TagKey
          - TagValue
          - S3Bucket

    ParameterLabels:
      AZs:
        default: "Choose 2 Availability Zones"
      FlowLogRetentionPeriod:
        default: "Flow Log Retention Period"
      VPCCidr:
        default: "VPC CIDR Block"
      Sub1Cidr:
        default: "Subnet 1 CIDR Block"
      Sub2Cidr:
        default: "Subnet 2 CIDR Block"
      CloudHedgeAMIID:
        default: "Cloud Hedge Server AMI"
      BuildAMIID:
        default: "Build Server AMI"
      ApplicationAMIID:
        default: "Build Server AMI"
      SSHLocation:
        default: "SSH Location"
      TagKey:
        default: "Tag Key"
      TagValue:
        default: "Tag Value"


Parameters:
  FlowLogRetentionPeriod: # CloudWatch Log Group Retention Period
    Type: String
    Default: 7
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
  VPCCidr:  # VPC CIDR Block
    Type: String
    Default: 10.50.0.0/16
  Sub1Cidr:  # Subnet 1 CIDR Block
    Type: String
    Default: 10.50.1.0/24
  Sub2Cidr:  # Subnet 2 CIDR Block
    Type: String
    Default: 10.50.2.0/24
  AZs:  # Availability Zones
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CloudHedgeAMIID:
    Default: "ami-0affd4508a5d2481b"
    Type: String
    MinLength: '1'
    MaxLength: '255'
  CloudHedgeInstanceType:
    Description: Cloud Hedge Server type
    Type: String
    Default: t3.xlarge
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
  BuildAMIID:
    Default: "ami-0affd4508a5d2481b"
    Type: String
    MinLength: '1'
    MaxLength: '255'
  BuildInstanceType:
    Description: Build Server type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  ApplicationAMIID:
    Default: "ami-0affd4508a5d2481b"
    Type: String
    MinLength: '1'
    MaxLength: '255'
  ApplicationInstanceType:
    Description: Application Server type
    Type: String
    Default: t3.small
    AllowedValues:
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: '1'
    MaxLength: '255'
  SSHLocation:
    Description: "IP or range to SSH from"
    Type: String
  TagKey:
    Default: "Environment"
    Type: String
  TagValue:
    Default: "cloudhedge-development"
    Type: String
  S3Bucket:
    Description: Pre-created S3 Bucket where Cloud Hedge install resides
    Type: String
    MinLength: '1'
    MaxLength: '255'
    Default: cloudhedge-demo
Resources:
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['', ["igw-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  IGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
      - Key: Name
        Value: !Join ['', ["vpc-", !Ref "AWS::StackName" ]]
      - Key: !Ref TagKey
        Value: !Ref TagValue
  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Sub1Cidr
      AvailabilityZone: !Select [ 0, !Ref AZs ]    # AZ 1
      Tags:
      - Key: Name
        Value: !Join ['', ["AZ1-", !Ref "AWS::StackName" ]]
      - Key: !Ref TagKey
        Value: !Ref TagValue
  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref Sub2Cidr
      AvailabilityZone: !Select [ 1, !Ref AZs ]    # AZ 2
      Tags:
      - Key: Name
        Value: !Join ['', ["AZ2-", !Ref "AWS::StackName" ]]
      - Key: !Ref TagKey
        Value: !Ref TagValue

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: !Join ['', ["public-rt-", !Ref "AWS::StackName" ]]
      - Key: !Ref TagKey
        Value: !Ref TagValue
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
  PublicRouteTableAssociationSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref Subnet2

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref PublicRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref VPC
  FlowLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Tags:
      - Key: Name
        Value: !Join ['', ["flowLog-", !Ref "AWS::StackName" ]]
      - Key: !Ref TagKey
        Value: !Ref TagValue
  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "flowlogpolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:DescribeLogGroups"
              - "logs:DescribeLogStreams"
              - "logs:PutLogEvents"
            Resource: "*"
      Roles:
        -
          Ref: "FlowLogRole"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ["/aws/vpc/flowLog/", !Ref TagValue ]]
      RetentionInDays: !Ref FlowLogRetentionPeriod
  VPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: !Ref LogGroup
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  SecurityGroupSSHInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: SSH External
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: !Join ['', ["sshInbound-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SecurityGroupHTTPSInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS access via port 443
      GroupName: HTTPS
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref SSHLocation
      Tags:
        - Key: Name
          Value: !Join ['', ["httpsInbound-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SecurityGroupCloudHedgeInternal:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable CloudHedge Internal Traffic
      GroupName: CloudHedge Internal
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join ['', ["internal-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  SecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCloudHedgeInternal
      IpProtocol: tcp
      FromPort: '20'
      ToPort: '21'
      Description: "ftp"
      SourceSecurityGroupId: !Ref SecurityGroupCloudHedgeInternal
  SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCloudHedgeInternal
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      Description: "ssh"
      SourceSecurityGroupId: !Ref SecurityGroupCloudHedgeInternal
  SecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCloudHedgeInternal
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      Description: "https"
      SourceSecurityGroupId: !Ref SecurityGroupCloudHedgeInternal
  SecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCloudHedgeInternal
      IpProtocol: tcp
      FromPort: '445'
      ToPort: '445'
      Description: "smb"
      SourceSecurityGroupId: !Ref SecurityGroupCloudHedgeInternal
  SecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupCloudHedgeInternal
      IpProtocol: tcp
      FromPort: '5985'
      ToPort: '5986'
      Description: "winrm"
      SourceSecurityGroupId: !Ref SecurityGroupCloudHedgeInternal

  Ec2ProfileRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  Ec2ProfileRolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ec2profilepolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "s3:*"
            Resource: !Join ['', ["arn:aws:s3:::", !Ref S3Bucket ]]
          -
            Effect: "Allow"
            Action:
              - "s3:*"
            Resource: !Join ['', ["arn:aws:s3:::", !Ref S3Bucket, "/*" ]]
      Roles:
        -
          Ref: "Ec2ProfileRole"
  Ec2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
        -
          Ref: "Ec2ProfileRole"

  CloudHedgeInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref CloudHedgeInstanceType
      SubnetId: !Ref Subnet2
      SecurityGroupIds:
        - !Ref SecurityGroupSSHInbound
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupCloudHedgeInternal
      KeyName: !Ref KeyName
      IamInstanceProfile: !Ref Ec2InstanceProfile
      ImageId: !Ref CloudHedgeAMIID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      UserData:
        Fn::Base64: |
          #! /bin/bash
          # Update System
          yum -y update

          # Disable SELinux
          sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
          setenforce 0

          # Install and Enable Docker
          yum install -y yum-utils device-mapper-persistent-data lvm2
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          yum install -y docker-ce
          systemctl enable docker.service
          systemctl start docker.service

          # Pull and Install Docker Compose
          curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # Add MongoDB Repo and Install
          bash -c 'cat <<EOF > /etc/yum.repos.d/mongodb-org-4.2.repo
          [mongodb-org-4.2]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/redhat/\$releasever/mongodb-org/4.2/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-4.2.asc
          EOF'

          yum update -y
          yum install -y mongodb-org

          # Find Internal IP Address
          IP=`curl http://169.254.169.254/latest/meta-data/local-ipv4`

          # Configure MongoDB with Internal IP Address and Restart
          sed -i.bkp -e "s/bindIp:.*/bindIp: ${IP}/g" /etc/mongod.conf
          systemctl enable mongod
          systemctl start mongod

          # Install AWS CLI
          yum -y install unzip
          curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          ./aws/install

          # Make Directory
          mkdir /appliance

          # Download Installer
          aws s3 cp s3://cloudhedge-demo/install.tar.gz /appliance

          # Extract Package and Load Containers
          tar -zxvf /appliance/install.tar.gz -C /appliance
          rm -rf /appliance/install.tar.gz
          tar --warning=no-timestamp -xzvf /appliance/containers.tar.gz -C /appliance
          rm -rf /appliance/containers.tar.gz

          # Load Docker Images
          docker load -i /appliance/containers.tar
      Tags:
        - Key: Name
          Value: !Join ['', ["chServer-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Host
          Value: 1
  CloudHedgeInstanceElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref CloudHedgeInstance
      Tags:
        - Key: Name
          Value: !Join ['', ["chServerEip-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  BuildInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref BuildInstanceType
      SubnetId: !Ref Subnet2
      SecurityGroupIds:
        - !Ref SecurityGroupSSHInbound
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupCloudHedgeInternal
      KeyName: !Ref KeyName
      ImageId: !Ref BuildAMIID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
      UserData:
        Fn::Base64: |
          #! /bin/bash
          # Update System
          yum -y update

          # Disable SELinux
          sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
          setenforce 0

          # Install and Enable Docker
          yum install -y yum-utils device-mapper-persistent-data lvm2
          yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
          yum install -y docker-ce
          systemctl enable docker.service
          systemctl start docker.service

          # Disable requiretty
          sed -i 's/\!visiblepw/\!visiblepw\nDefaults:centos    !requiretty/g' /etc/sudoers
      Tags:
        - Key: Name
          Value: !Join ['', ["buildServer-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Host
          Value: 1
  BuildInstanceElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref BuildInstance
      Tags:
        - Key: Name
          Value: !Join ['', ["buildEip-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
  ApplicationInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref ApplicationInstanceType
      SubnetId: !Ref Subnet2
      SecurityGroupIds:
        - !Ref SecurityGroupSSHInbound
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupCloudHedgeInternal
      KeyName: !Ref KeyName
      ImageId: !Ref ApplicationAMIID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
      UserData:
        Fn::Base64: |
          #! /bin/bash
          # Update System
          yum -y update

          # Disable SELinux
          sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config
          setenforce 0

          # Disable requiretty
          sed -i 's/\!visiblepw/\!visiblepw\nDefaults:centos    !requiretty/g' /etc/sudoers

          # Install Git and Clone Repo
          yum -y install git
          git clone "https://github.com/bezikan/SpringBoot-Angular7-ShoppingCart.git" "/root/SpringBoot-Angular7-ShoppingCart"
          mkdir /opt/eshop
          mkdir /opt/eshop/backend
          mkdir /opt/eshop/frontend

          # Update Hosts File
          sed -i.bkp 's/127\.0\.0\.1  /127\.0\.0\.1   db-host app-host/g' /etc/hosts

          # Update App Settings
          sed -i.bkp 's/localhost\/postgres/db-host\/postgres/g' /root/SpringBoot-Angular7-ShoppingCart/backend/src/main/resources/application.yml
          sed -i.bkp 's/proxy_pass http:\/\/backend:8080\/api/proxy_pass http:\/\/app-host:8080\/api/g' /root/SpringBoot-Angular7-ShoppingCart/frontend/nginx/default.conf
          sed -i 's/root \/usr\/share\/nginx\/html/root \/opt\/eshop\/frontend/g' /root/SpringBoot-Angular7-ShoppingCart/frontend/nginx/default.conf

          # Create Service File
          bash -c 'cat <<EOF > /usr/lib/systemd/system/eshop.service
          [Unit]
          Description=App Service
          [Service]
          Type=simple
          WorkingDirectory=/opt/eshop/backend
          ExecStart=/usr/bin/java -jar /opt/eshop/backend/shop-api-0.0.1-SNAPSHOT.jar
          [Install]
          WantedBy=multi-user.target
          EOF'

          ln -s /usr/lib/systemd/system/eshop.service /etc/systemd/system/multi-user.target.wants/eshop.service

          # Install PostgreSQL and Configure
          yum -y update
          yum -y install postgresql-server
          systemctl enable postgresql
          postgresql-setup initdb
          sed -i.bkp "s/#listen_addresses = 'localhost'/listen_addresses = '*'/g" /var/lib/pgsql/data/postgresql.conf
          sed -i.bkp -e '$ahost    all             all              0.0.0.0/0               md5' /var/lib/pgsql/data/pg_hba.conf

      Tags:
        - Key: Name
          Value: !Join ['', ["applicationServer-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue
        - Key: Host
          Value: 1
  ApplicationInstanceElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref ApplicationInstance
      Tags:
        - Key: Name
          Value: !Join ['', ["applicationEip-", !Ref "AWS::StackName" ]]
        - Key: !Ref TagKey
          Value: !Ref TagValue

Outputs:
  VPC:
    Description: VPC CrossStack ID
    Value: !Ref VPC
    Export:
      Name:
        !Sub "${AWS::StackName}-VPC"
  VPCCIDR:
    Description: VPC CIDR CrossStack ID
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name:
        !Sub "${AWS::StackName}-VPCCIDR"
  IGW:
    Description: IGW CrossStack ID
    Value: !Ref IGW
    Export:
      Name:
        !Sub "${AWS::StackName}-IGW"
  Subnet1:
    Description: Subnet 1 CrossStack ID
    Value: !Ref Subnet1
    Export:
      Name:
        !Sub "${AWS::StackName}-Subnet1"
  Subnet2:
    Description: Subnet 2 CrossStack ID
    Value: !Ref Subnet2
    Export:
      Name:
        !Sub "${AWS::StackName}-Subnet2"

