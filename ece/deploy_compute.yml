AWSTemplateFormatVersion: 2010-09-09
Description: Deploy ECE Compute Components with Separate AMIs for each Compute Tier

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "CrossStack Reference"
        Parameters:
          - NetworkStackName
      -
        Label:
          default: "Environment Type"
        Parameters:
          - EnvType
      -
        Label:
          default: "DNS Configuration"
        Parameters:
          - DNSPrivateZone
          - Domain
      -
        Label:
          default: "EC2 Configuration"
        Parameters:
          - MgmtMasterPythonAMIID
          - HotAMIID
          - WarmAMIID
          - WindowsAMIID
          - OtherAMIIDs
          - KeyName
          - KMSKey
          - ManagementInstanceType
          - MasterInstanceType
          - HotDataInstanceType
          - WarmDataInstanceType
          - PythonInstanceType
          - LogstashInstanceType
          - RabbitMQInstanceType
          - SSHLocation

Parameters:
  NetworkStackName:
    Description: Name of an active CloudFormation Stack that contains the Networking Resources
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  EnvType:
    Description: Environment Type to be deployed
    Default: development
    Type: String
    AllowedValues: [test, development]
    ConstraintDescription: must specify development or test

  MgmtMasterPythonAMIID:
    Description: ID of AMI for the Management, Master and Python Tiers
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  HotAMIID:
    Description: ID of AMI for the Hot Tier
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  WarmAMIID:
    Description: ID of AMI for the Warm Tier
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  WindowsAMIID:
    Description: ID of AMI for the Windows Server
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  OtherAMIIDs:
    Description: ID of AMI for the Bastion/Logstash/RabbitMQ Servers
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  KMSKey:
    Description: AliasName of an existing KMS Key for encrypting Volumes
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '^[a-zA-Z][-a-zA-Z0-9]*$'
  ManagementInstanceType:
    Description: Management Server type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - t3.micro
      - m5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  MasterInstanceType:
    Description: Master Server type
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.micro
      - t3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  HotDataInstanceType:
    Description: Hot Data Server type
    Type: String
    Default: r5.2xlarge
    AllowedValues:
      - t3.micro
      - r5.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  WarmDataInstanceType:
    Description: Warm Data Server type
    Type: String
    Default: m5.2xlarge
    AllowedValues:
      - t3.micro
      - h1.2xlarge
      - m5.2xlarge
  PythonInstanceType:
    Description: Python Server type
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.micro
      - t3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  LogstashInstanceType:
    Description: Logstash Server type
    Type: String
    Default: c5.4xlarge
    AllowedValues:
      - t3.micro
      - c5.4xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  RabbitMQInstanceType:
    Description: RabbitMQ Server type
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t3.micro
      - t3.2xlarge
    ConstraintDescription: Must be a valid EC2 instance type
  SSHLocation:
    Description: The IP address range that can be used to SSH to the Bastion Server
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/8
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x
  DNSPrivateZone:
    Description: Private Hosted Zone (e.g. elastic-dev.local)
    Type: String
    MinLength: '1'
    MaxLength: '255'
  Domain:
    Description: Domain previously registered in Route 53 (e.g. elastic-dev.net)
    Type: String
    MinLength: '1'
    MaxLength: '255'
Conditions:
  CreateTestResources: !Equals [!Ref EnvType, test]
  CreateDevResources: !Equals [!Ref EnvType, development]

Resources:
  SecurityGroupSSHInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access via port 22
      GroupName: SSH External
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref SSHLocation
  SecurityGroupRDPInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable RDP access via port 3389
      GroupName: RDP External
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref SSHLocation
  SecurityGroupHTTPSInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTPS access via port 443
      GroupName: HTTPS
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '12443'
          ToPort: '12443'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '9243'
          ToPort: '9243'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
        - IpProtocol: tcp
          FromPort: '12443'
          ToPort: '12443'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
        - IpProtocol: tcp
          FromPort: '9243'
          ToPort: '9243'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
  SecurityGroupSSHandPING:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH and PING access
      GroupName: SSH and PING Internal
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"
  SecurityGroupElastic:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable Elastic Internal Traffic
      GroupName: Elastic Internal
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
  SecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '12443'
      ToPort: '12443'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress2:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '9243'
      ToPort: '9243'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '2112'
      ToPort: '2112'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress4:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '12191'
      ToPort: '12201'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress5:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '19000'
      ToPort: '19999'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress6:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '18000'
      ToPort: '18999'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress7:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '20000'
      ToPort: '20999'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress8:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '22191'
      ToPort: '22195'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress9:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '21000'
      ToPort: '21999'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress10:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '9244'
      ToPort: '9244'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress11:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '9343'
      ToPort: '9343'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupIngress12:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupElastic
      IpProtocol: tcp
      FromPort: '9043'
      ToPort: '9043'
      SourceSecurityGroupId: !Ref SecurityGroupElastic
  SecurityGroupALBInbound:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable access to the Application Load Balancer
      GroupName: ALB Internal
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPCCIDR"

  MGMT1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref ManagementInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet1"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["mgmt1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 1
  Master1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref MasterInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet1"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["master1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 4
  HotData1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref HotDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet1"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref HotAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["hotdata1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 7
  WarmData1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref WarmDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet1"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref WarmAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["warmdata1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 10
  MGMT1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref ManagementInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet2"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["mgmt1-az2-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 2
  Master1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref MasterInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet2"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["master1-az2-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 5
  HotData1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref HotDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet2"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref HotAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["hotdata1-az2-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 8
  WarmData1AZ2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref WarmDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet2"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref WarmAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["warmdata1-az2-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 11
  MGMT1AZ3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref ManagementInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet3"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupHTTPSInbound
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["mgmt1-az3-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 3
  Master1AZ3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref MasterInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet3"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["master1-az3-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 6
  HotData1AZ3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref HotDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet3"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref HotAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["hotdata1-az3-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 9
  WarmData1AZ3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref WarmDataInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet3"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupElastic
      KeyName: !Ref KeyName
      ImageId: !Ref WarmAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["warmdata1-az3-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 9
  Python1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref PythonInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet4"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
        - !Ref SecurityGroupHTTPSInbound
      KeyName: !Ref KeyName
      ImageId: !Ref MgmtMasterPythonAMIID
      Tags:
        - Key: Name
          Value: !Join ['', ["python1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 13
  Logstash1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref LogstashInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet4"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
      KeyName: !Ref KeyName
      ImageId: !Ref OtherAMIIDs
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
        - DeviceName: /dev/sdb
          Ebs:
            VolumeSize: 500
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          mkdir /mnt/data
          echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/nvme1n1
          mkfs.xfs /dev/nvme1n1p1
          echo "/dev/nvme1n1p1  /mnt/data  xfs  defaults,nofail,x-systemd.automount,prjquota,pquota  0 2" >> /etc/fstab
          mount -a
      Tags:
        - Key: Name
          Value: !Join ['', ["logstash1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 14
  RabbitMQ1AZ1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: !Ref RabbitMQInstanceType
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet4"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHandPING
      KeyName: !Ref KeyName
      ImageId: !Ref OtherAMIIDs
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
        - DeviceName: /dev/sdb
          Ebs:
            VolumeSize: 200
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      UserData:
        Fn::Base64: !Sub |
          #! /bin/bash
          mkdir /mnt/data
          echo -e "o\nn\np\n1\n\n\nw" | fdisk /dev/nvme1n1
          mkfs.xfs /dev/nvme1n1p1
          echo "/dev/nvme1n1p1  /mnt/data  xfs  defaults,nofail,x-systemd.automount,prjquota,pquota  0 2" >> /etc/fstab
          mount -a
      Tags:
        - Key: Name
          Value: !Join ['', ["rabbitmq1-az1-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: 17
  BastionHost:
    Type: 'AWS::EC2::Instance'
    Condition: CreateTestResources
    Properties:
      InstanceType: t3.micro
      SubnetId:
          Fn::ImportValue:
            !Sub "${NetworkStackName}-Subnet4"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHInbound
      KeyName: !Ref KeyName
      ImageId: !Ref OtherAMIIDs
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      Tags:
        - Key: Name
          Value: !Join ['', ["bastion-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: Bastion
  ExtBastionHost:
    Type: 'AWS::EC2::Instance'
    Condition: CreateDevResources
    Properties:
      InstanceType: t3.micro
      SubnetId:
          Fn::ImportValue:
            !Sub "${NetworkStackName}-Subnet5"
      SecurityGroupIds:
        - !Ref SecurityGroupSSHInbound
      KeyName: !Ref KeyName
      ImageId: !Ref OtherAMIIDs
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 100
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      Tags:
        - Key: Name
          Value: !Join ['', ["bastion-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: Bastion
  ExtBastionElasticIP:
    Type: AWS::EC2::EIP
    Condition: CreateDevResources
    Properties:
      Domain: vpc
      InstanceId: !Ref ExtBastionHost
      Tags:
        - Key: Environment
          Value: elastic-poc
  WindowsHost:
    Type: 'AWS::EC2::Instance'
    Condition: CreateTestResources
    Properties:
      InstanceType: t3.medium
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet4"
      SecurityGroupIds:
        - !Ref SecurityGroupRDPInbound
      KeyName: !Ref KeyName
      ImageId: !Ref WindowsAMIID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      Tags:
        - Key: Name
          Value: !Join ['', ["windows-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: Windows
  ExtWindowsHost:
    Type: 'AWS::EC2::Instance'
    Condition: CreateDevResources
    Properties:
      InstanceType: t3.medium
      SubnetId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-Subnet5"
      SecurityGroupIds:
        - !Ref SecurityGroupRDPInbound
      KeyName: !Ref KeyName
      ImageId: !Ref WindowsAMIID
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 30
            VolumeType: gp2
            Encrypted: true
            KmsKeyId: !Join ['', ["alias/", !Ref "KMSKey" ]]
      Tags:
        - Key: Name
          Value: !Join ['', ["windows-", !Ref "AWS::StackName" ]]
        - Key: Environment
          Value: elastic-poc
        - Key: Host
          Value: Windows
  ExtWindowsElasticIP:
    Type: AWS::EC2::EIP
    Condition: CreateDevResources
    Properties:
      Domain: vpc
      InstanceId: !Ref ExtWindowsHost
      Tags:
        - Key: Environment
          Value: elastic-poc

  DNS:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'Private Hosted Zone for ECE'
      Name: !Ref DNSPrivateZone
      VPCs:
        -
          VPCId:
            Fn::ImportValue:
              !Sub "${NetworkStackName}-VPC"
          VPCRegion: !Ref "AWS::Region"
      HostedZoneTags:
        -
          Key: Name
          Value:  !Join ['', ["dns-private-zone-", !Ref "AWS::StackName" ]]
        -
          Key: Environment
          Value: elastic-poc
  MGMT1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["mgmt1.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt MGMT1AZ1.PrivateIp
      TTL: '300'
      Type: A
  Master1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["master1.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt Master1AZ1.PrivateIp
      TTL: '300'
      Type: A
  HotData1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["hot1.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt HotData1AZ1.PrivateIp
      TTL: '300'
      Type: A
  WarmData1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["warm1.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt WarmData1AZ1.PrivateIp
      TTL: '300'
      Type: A
  MGMT1AZ2Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["mgmt2.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt MGMT1AZ2.PrivateIp
      TTL: '300'
      Type: A
  Master1AZ2Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["master2.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt Master1AZ2.PrivateIp
      TTL: '300'
      Type: A
  HotData1AZ2Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["hot2.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt HotData1AZ2.PrivateIp
      TTL: '300'
      Type: A
  WarmData1AZ2Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["warm2.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt WarmData1AZ2.PrivateIp
      TTL: '300'
      Type: A
  MGMT1AZ3Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["mgmt3.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt MGMT1AZ3.PrivateIp
      TTL: '300'
      Type: A
  Master1AZ3Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["master3.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt Master1AZ3.PrivateIp
      TTL: '300'
      Type: A
  HotData1AZ3Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["hot3.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt HotData1AZ3.PrivateIp
      TTL: '300'
      Type: A
  WarmData1AZ3Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["warm3.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt WarmData1AZ3.PrivateIp
      TTL: '300'
      Type: A
  Python1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["python.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt Python1AZ1.PrivateIp
      TTL: '300'
      Type: A
  Logstash1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["logstash.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt Logstash1AZ1.PrivateIp
      TTL: '300'
      Type: A
  RabbitMQ1AZ1Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["rabbit.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt RabbitMQ1AZ1.PrivateIp
      TTL: '300'
      Type: A
  BastionHostRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateTestResources
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["bastion.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt BastionHost.PrivateIp
      TTL: '300'
      Type: A
  ExtBastionHostRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDevResources
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["bastion.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt ExtBastionHost.PrivateIp
      TTL: '300'
      Type: A
  WindowsHostRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateTestResources
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["windows.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt WindowsHost.PrivateIp
      TTL: '300'
      Type: A
  ExtWindowsHostRecord:
    Type: AWS::Route53::RecordSet
    Condition: CreateDevResources
    Properties:
      HostedZoneId: !Ref DNS
      Name: !Join ['', ["windows.", !Ref DNSPrivateZone ]]
      ResourceRecords:
        - !GetAtt ExtWindowsHost.PrivateIp
      TTL: '300'
      Type: A
  WildCardRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ['', [!Ref Domain, "."]]
      RecordSets:
      - Name: !Join ['', ["*.", !Ref Domain, "."]]
        Type: A
          AliasTarget:
            HostedZoneId: !GetAtt
              - MyLoadBalancer
              - CanonicalHostedZoneNameID
            DNSName: !GetAtt
              - MyLoadBalancer
              - DNSName
            EvaluateTargetHealth: 'True'
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: !Join ['', ["alb-", !Ref "AWS::StackName" ]]
      Scheme: internal
      SecurityGroups:
        - !Ref SecurityGroupALBInbound
      Subnets:
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-Subnet1"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-Subnet2"
        - Fn::ImportValue:
            !Sub "${NetworkStackName}-Subnet3"
      Tags:
        - Key: Environment
          Value: elastic-poc
      Type: application
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  ALBListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppLoadBalancer
      Certificates:
        - CertificateArn: !Ref ALBCert
      Port: 443
      Protocol: HTTPS
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name: !Join ['', ["targetgroup-", !Ref "AWS::StackName" ]]
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Environment
          Value: elastic-poc
      Targets:
        - Id: !Ref MGMT1AZ1
        - Id: !Ref MGMT1AZ2
        - Id: !Ref MGMT1AZ3
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Sub "${NetworkStackName}-VPC"
  ALBCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Join ['', ["*.", !Ref Domain ]]
      ValidationMethod: DNS

Outputs:
  MGMT1AZ1DNS:
    Description: Private DNS Record of Management 1
    Value: !Ref MGMT1AZ1Record
  MGMT1AZ2DNS:
    Description: Private DNS Record of Management 2
    Value: !Ref MGMT1AZ2Record
  MGMT1AZ3DNS:
    Description: Private DNS Record of Management 3
    Value: !Ref MGMT1AZ3Record
  Master1AZ1DNS:
    Description: Private DNS Record of Master 1
    Value: !Ref Master1AZ1Record
  Master1AZ2DNS:
    Description: Private DNS Record of Master 2
    Value: !Ref Master1AZ2Record
  Master1AZ3DNS:
    Description: Private DNS Record of Master 3
    Value: !Ref Master1AZ3Record
  HotData1AZ1DNS:
    Description: Private DNS Record of HotData 1
    Value: !Ref HotData1AZ1Record
  HotData1AZ2DNS:
    Description: DNS Record of HotData 2
    Value: !Ref HotData1AZ2Record
  HotData1AZ3DNS:
    Description: Private DNS Record of HotData 3
    Value: !Ref HotData1AZ3Record
  WarmData1AZ1DNS:
    Description: Private DNS Record of WarmData 1
    Value: !Ref WarmData1AZ1Record
  WarmData1AZ2DNS:
    Description: DNS Record of WarmData 2
    Value: !Ref WarmData1AZ2Record
  WarmData1AZ3DNS:
    Description: Private DNS Record of WarmData 3
    Value: !Ref WarmData1AZ3Record
  Python1AZ1DNS:
    Description: Private DNS Record of Python
    Value: !Ref Python1AZ1Record
  Logstash1AZ1DNS:
    Description: DNS Record of Logstash
    Value: !Ref Logstash1AZ1Record
  RabbitMQ1AZ1DNS:
    Description: Private DNS Record of RabbitMQ
    Value: !Ref RabbitMQ1AZ1Record
  BastionHostDNS:
    Condition: CreateTestResources
    Description: Private DNS Record of Bastion Server
    Value: !Ref BastionHostRecord
  BastionHostInternalDNS:
    Condition: CreateDevResources
    Description: Private DNS Record of Bastion Server
    Value: !Ref ExtBastionHostRecord
  BastionHostPublicIP:
    Condition: CreateDevResources
    Description: Public IP of Bastion Server
    Value: !GetAtt ExtBastionHost.PublicIp
  WindowsHostDNS:
    Condition: CreateTestResources
    Description: Private DNS of Windows Server
    Value: !Ref WindowsHostRecord
  WindowsHostInternalDNS:
    Condition: CreateDevResources
    Description: Private DNS Record of Windows Server
    Value: !Ref ExtWindowsHostRecord
  WindowsHostPublicIP:
    Condition: CreateDevResources
    Description: Public IP of Windows Server
    Value: !GetAtt ExtWindowsHost.PublicIp