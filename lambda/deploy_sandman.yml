AWSTemplateFormatVersion: 2010-09-09
Description: Deploys a Lambda Function to shutdown EC2 instances at a set time each night

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Instance Stop Configuration"
        Parameters:
          - StopStatus
          - StopTime
      -
        Label:
          default: "Instance Start Configuration"
        Parameters:
          - StartStatus
          - StartTime
      -
        Label:
          defautl: "Additional Parameters"
        Parameters:
          - KeyName
          - KeyValue
          - FlowLogRetentionPeriod

    ParameterLabels:
      KeyName:
        default: "Tag Key Name"
      KeyValue:
        default: "Tag Key Value"
      StopTime:
        default: "Instance Shutdown Time.  Default is Monday-Friday 22:00 UTC (5:00pm EST/4:00pm EDT)"
      StopStatus:
        default: "Determines whether the instances will be stopped each day (either ENABLED or DISABLED)"
      StartTime:
        default: "Instance Startup Time.  Default is Monday-Friday 13:00 UTC (9:00am EST/8:00am EDT)"
      StartStatus:
        default: "Determines whether the instances will be started each day (either ENABLED or DISABLED)"

Parameters:
  KeyName:
    Type: String
    Default: sandman
  KeyValue:
    Type: String
    Default: true
  StopTime:
    Type: String
    Default: cron(00 22 ? * MON-FRI *)
  StopStatus:
    Type: String
    Default: ENABLED
  StartTime:
    Type: String
    Default: cron(00 13 ? * MON-FRI *)
  StartStatus:
    Type: String
    Default: ENABLED
  FlowLogRetentionPeriod: # CloudWatch Log Group Retention Period
    Type: String
    Default: 90
    AllowedValues:
      - 1
      - 30
      - 60
      - 90
      - 120
      - 180
      - 365

Resources:
  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
  RolePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "lambdapolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ec2:DescribeInstances"
              - "ec2:StopInstances"
              - "ec2:StartInstances"
              - "ec2:DescribeInstanceStatus"
            Resource: "*"
      Roles:
        -
          Ref: "LambdaRole"
  LogGroupStop:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ["/aws/lambda/", !Ref "AWS::StackName", "-stop" ]]
      RetentionInDays: !Ref FlowLogRetentionPeriod
  LogGroupStart:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', ["/aws/lambda/", !Ref "AWS::StackName", "-start" ]]
      RetentionInDays: !Ref FlowLogRetentionPeriod

  LambdaSandmanStop:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
              running_ids = []
              ec2 = boto3.resource('ec2')

              running_instances = ec2.instances.filter(
                                  Filters=[{'Name': 'instance-state-name', 'Values': ['running']},
                                           {'Name': 'tag:${KeyName}', 'Values': ['${KeyValue}']}
                                           ])
              for running_instance in running_instances:
                      running_ids.append(running_instance.id)
              if len(running_ids) < 1:
                  print('No eligible running instances')
              else:
                  print('The following eligible running instances were shut down:')
                  for running_id in running_ids:
                      print(running_id)

                  ec2.instances.filter(InstanceIds=running_ids).stop()
      Description: Lambda Function to shutdown EC2 instances at a set time each night
      FunctionName: !Join ['', [ !Ref "AWS::StackName", "-stop" ]]
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  ScheduledRuleStop:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ['', ["scheduled-rule-", !Ref "AWS::StackName", "-stop" ]]
      Description: "Scheduled Stop Event Rule"
      ScheduleExpression: !Ref StopTime
      State: !Ref StopStatus
      Targets:
        -
          Arn: !GetAtt LambdaSandmanStop.Arn
          Id: Id123
  PermissionForEventsToInvokeLambdaStop:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaSandmanStop
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleStop.Arn

  LambdaSandmanStart:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: !Sub |
          import boto3
          def lambda_handler(event, context):
              stopped_ids = []
              ec2 = boto3.resource('ec2')

              stopped_instances = ec2.instances.filter(
                                  Filters=[{'Name': 'instance-state-name', 'Values': ['stopped']},
                                           {'Name': 'tag:${KeyName}', 'Values': ['${KeyValue}']}
                                           ])
              for stopped_instance in stopped_instances:
                      stopped_ids.append(stopped_instance.id)
              if len(stopped_ids) < 1:
                  print('No eligible stopped instances')
              else:
                  print('The following eligible stopped instances were started:')
                  for stopped_id in stopped_ids:
                      print(stopped_id)

                  ec2.instances.filter(InstanceIds=stopped_ids).start()
      Description: Lambda Function to startup EC2 instances at a set time each day
      FunctionName: !Join ['', [ !Ref "AWS::StackName", "-start" ]]
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7
      Timeout: 20

  ScheduledRuleStart:
    Type: AWS::Events::Rule
    Properties:
      Name: !Join ['', ["scheduled-rule-", !Ref "AWS::StackName", "-start" ]]
      Description: "Scheduled Start Event Rule"
      ScheduleExpression: !Ref StartTime
      State: !Ref StartStatus
      Targets:
        -
          Arn: !GetAtt LambdaSandmanStart.Arn
          Id: Id456
  PermissionForEventsToInvokeLambdaStart:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaSandmanStart
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ScheduledRuleStart.Arn
